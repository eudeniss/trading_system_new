# analyzers/regimes/regime_translator.py
"""
Tradutor de regimes de mercado para portugu√™s.
Fornece nomes e descri√ß√µes em portugu√™s para cada regime detectado.
"""
from typing import Dict
from analyzers.regimes.market_regime_detector import MarketRegime

class RegimeTranslator:
    """Traduz os regimes de mercado para portugu√™s."""
    
    TRANSLATIONS = {
        MarketRegime.TRENDING_UP: "Tend√™ncia de Alta üìà",
        MarketRegime.TRENDING_DOWN: "Tend√™ncia de Baixa üìâ", 
        MarketRegime.RANGING: "Mercado Lateral üîÑ",
        MarketRegime.VOLATILE: "Alta Volatilidade ‚ö°",
        MarketRegime.QUIET: "Mercado Parado üò¥",
        MarketRegime.BREAKOUT: "Rompimento üöÄ",
        MarketRegime.REVERSAL: "Revers√£o üîÄ"
    }
    
    DESCRIPTIONS = {
        MarketRegime.TRENDING_UP: "Movimento consistente de alta",
        MarketRegime.TRENDING_DOWN: "Movimento consistente de baixa",
        MarketRegime.RANGING: "Oscilando entre suporte e resist√™ncia",
        MarketRegime.VOLATILE: "Movimentos err√°ticos e amplitude alta",
        MarketRegime.QUIET: "Sem dire√ß√£o clara, baixo volume",
        MarketRegime.BREAKOUT: "Rompendo n√≠veis importantes",
        MarketRegime.REVERSAL: "Mudando de dire√ß√£o (compra‚Üívenda ou venda‚Üícompra)"
    }
    
    @classmethod
    def translate(cls, regime: MarketRegime) -> str:
        """Retorna o nome traduzido do regime."""
        return cls.TRANSLATIONS.get(regime, str(regime))
    
    @classmethod
    def get_description(cls, regime: MarketRegime) -> str:
        """Retorna a descri√ß√£o do regime."""
        return cls.DESCRIPTIONS.get(regime, "")
    
    @classmethod
    def get_full_info(cls, regime: MarketRegime) -> Dict[str, str]:
        """Retorna informa√ß√µes completas do regime."""
        return {
            'name': cls.translate(regime),
            'description': cls.get_description(regime),
            'original': regime.value
        }
# analyzers/patterns/defensive_filter.py
from typing import Dict, Tuple, Optional
from domain.entities.signal import Signal
from domain.entities.book import OrderBook
import logging

logger = logging.getLogger(__name__)

class DefensiveSignalFilter:
    """
    Filtra sinais baseado APENAS no que podemos VER no book.
    N√ÉO tentamos adivinhar quem est√° operando.
    """
    
    def __init__(self):
        self.manipulation_patterns = {
            'LAYERING': self._check_layering,
            'SPOOFING': self._check_spoofing,
            # REMOVIDO WASH_TRADE - imposs√≠vel detectar sem saber quem opera!
        }
    
    def is_signal_safe(self, signal: Signal, book: Optional[OrderBook] = None, 
                      recent_trades: Optional[list] = None) -> Tuple[bool, Dict]:
        """Verifica se um sinal √© seguro baseado APENAS no que vemos no BOOK."""
        risk_info = {
            'safe': True,
            'risks': [],
            'confidence': 1.0,
            'action_required': None,
            'details': []
        }
        
        # Verifica apenas manipula√ß√µes VIS√çVEIS NO BOOK
        if book:
            # LAYERING - podemos VER as ordens uniformes
            layering_result = self._check_layering(book)
            if layering_result['detected']:
                risk_info['risks'].append('LAYERING')
                risk_info['confidence'] *= 0.5
                risk_info['details'].append(layering_result)
            
            # SPOOFING - podemos VER o desbalanceamento extremo
            spoofing_result = self._check_spoofing(book)
            if spoofing_result['detected']:
                risk_info['risks'].append('SPOOFING')
                risk_info['confidence'] *= 0.7
                risk_info['details'].append(spoofing_result)
        
        risk_info['safe'] = len(risk_info['risks']) == 0
        
        # Define a√ß√£o recomendada baseada no que VEMOS
        if not risk_info['safe']:
            risk_info['action_required'] = self._determine_action(risk_info)
            logger.warning(f"Manipula√ß√£o VIS√çVEL no book: {risk_info['risks']}")
        
        return risk_info['safe'], risk_info
    
    def _check_layering(self, book: OrderBook) -> Dict:
        """
        Detecta LAYERING - m√∫ltiplas ordens com volumes MUITO similares.
        Isso √â VIS√çVEL no book e √â suspeito.
        """
        result = {
            'detected': False,
            'type': 'LAYERING',
            'side': None,
            'description': None
        }
        
        # Par√¢metros mais rigorosos para evitar falsos positivos
        MIN_LEVELS = 4  # Precisa de pelo menos 4 n√≠veis
        MIN_VOLUME = 80  # Volume m√≠nimo relevante
        MAX_DEVIATION = 0.05  # M√°ximo 5% de desvio entre ordens
        
        # Verifica BIDS (compra)
        if len(book.bids) >= MIN_LEVELS:
            bid_volumes = [level.volume for level in book.bids[:6]]
            
            # S√≥ analisa se TODOS os volumes s√£o significativos
            if all(vol >= MIN_VOLUME for vol in bid_volumes[:MIN_LEVELS]):
                avg_vol = sum(bid_volumes[:MIN_LEVELS]) / MIN_LEVELS
                
                # Verifica se TODOS os n√≠veis s√£o MUITO pr√≥ximos da m√©dia
                all_similar = all(
                    abs(vol - avg_vol) / avg_vol <= MAX_DEVIATION 
                    for vol in bid_volumes[:MIN_LEVELS]
                )
                
                if all_similar:
                    result['detected'] = True
                    result['side'] = 'BID'
                    result['description'] = (
                        f"BOOK SUSPEITO (Compra): {MIN_LEVELS}+ ordens "
                        f"ID√äNTICAS de ~{int(avg_vol)} contratos"
                    )
                    return result
        
        # Verifica ASKS (venda)
        if len(book.asks) >= MIN_LEVELS:
            ask_volumes = [level.volume for level in book.asks[:6]]
            
            if all(vol >= MIN_VOLUME for vol in ask_volumes[:MIN_LEVELS]):
                avg_vol = sum(ask_volumes[:MIN_LEVELS]) / MIN_LEVELS
                
                all_similar = all(
                    abs(vol - avg_vol) / avg_vol <= MAX_DEVIATION 
                    for vol in ask_volumes[:MIN_LEVELS]
                )
                
                if all_similar:
                    result['detected'] = True
                    result['side'] = 'ASK'
                    result['description'] = (
                        f"BOOK SUSPEITO (Venda): {MIN_LEVELS}+ ordens "
                        f"ID√äNTICAS de ~{int(avg_vol)} contratos"
                    )
                    return result
        
        return result
    
    def _check_spoofing(self, book: OrderBook) -> Dict:
        """
        Detecta SPOOFING - desbalanceamento EXTREMO no book.
        Isso √â VIS√çVEL e pode indicar ordens falsas.
        """
        result = {
            'detected': False,
            'type': 'SPOOFING',
            'side': None,
            'description': None
        }
        
        if not book.bids or not book.asks:
            return result
        
        # Soma volume dos primeiros n√≠veis
        LEVELS_TO_CHECK = 5
        bid_volume = sum(level.volume for level in book.bids[:LEVELS_TO_CHECK])
        ask_volume = sum(level.volume for level in book.asks[:LEVELS_TO_CHECK])
        
        if bid_volume == 0 or ask_volume == 0:
            return result
        
        # Calcula propor√ß√£o
        if bid_volume > ask_volume:
            ratio = bid_volume / ask_volume
            heavier_side = 'BID'
        else:
            ratio = ask_volume / bid_volume
            heavier_side = 'ASK'
        
        # S√≥ marca como spoofing se MUITO desbalanceado
        SPOOFING_THRESHOLD = 8.0  # 8x mais volume de um lado
        
        if ratio >= SPOOFING_THRESHOLD:
            result['detected'] = True
            result['side'] = heavier_side
            
            if heavier_side == 'BID':
                result['description'] = (
                    f"BOOK ANORMAL: Compra {ratio:.1f}x maior que Venda - "
                    f"poss√≠veis ordens FALSAS"
                )
            else:
                result['description'] = (
                    f"BOOK ANORMAL: Venda {ratio:.1f}x maior que Compra - "
                    f"poss√≠veis ordens FALSAS"
                )
        
        return result
    
    def _determine_action(self, risk_info: Dict) -> str:
        """Determina a√ß√£o baseada no que VEMOS no book."""
        risks = risk_info.get('risks', [])
        details = risk_info.get('details', [])
        
        # A√ß√µes baseadas em LAYERING
        if 'LAYERING' in risks:
            for detail in details:
                if detail.get('type') == 'LAYERING':
                    if detail.get('side') == 'BID':
                        return "‚ö†Ô∏è CUIDADO ao COMPRAR! Book com ordens suspeitas na compra"
                    elif detail.get('side') == 'ASK':
                        return "‚ö†Ô∏è CUIDADO ao VENDER! Book com ordens suspeitas na venda"
        
        # A√ß√µes baseadas em SPOOFING
        if 'SPOOFING' in risks:
            for detail in details:
                if detail.get('type') == 'SPOOFING':
                    if detail.get('side') == 'BID':
                        return "‚ö†Ô∏è BOOK PESADO na COMPRA! Poss√≠vel manipula√ß√£o"
                    elif detail.get('side') == 'ASK':
                        return "‚ö†Ô∏è BOOK PESADO na VENDA! Poss√≠vel manipula√ß√£o"
        
        return "‚ö†Ô∏è BOOK ANORMAL! Opere com extrema cautela"
    
    def get_book_analysis_explanation(self) -> str:
        """Explica o que o sistema analisa."""
        return """
üîç AN√ÅLISE DO BOOK - O que VEMOS e o que significa:

1Ô∏è‚É£ ORDENS ID√äNTICAS (Layering)
   ‚Ä¢ O que vemos: 4+ ordens com volumes MUITO similares (ex: 100-100-100-100)
   ‚Ä¢ Por que √© suspeito: Ordens naturais t√™m tamanhos variados
   ‚Ä¢ A√ß√£o: CUIDADO! Podem sumir quando o pre√ßo se aproximar

2Ô∏è‚É£ BOOK DESBALANCEADO (Spoofing)
   ‚Ä¢ O que vemos: Um lado com 8x+ mais volume que o outro
   ‚Ä¢ Por que √© suspeito: Desequil√≠brio extremo n√£o √© natural
   ‚Ä¢ A√ß√£o: AGUARDE! Book pode mudar rapidamente

‚ùå O que N√ÉO tentamos detectar:
   ‚Ä¢ Wash trades (imposs√≠vel saber se √© a mesma pessoa)
   ‚Ä¢ Quem est√° operando (n√£o temos essa informa√ß√£o)
   ‚Ä¢ Inten√ß√µes dos traders (apenas vemos as ordens)

‚úÖ Focamos apenas no que √â VIS√çVEL e ANORMAL no book!
"""